#!/usr/bin/env python3

import torch
from src.model.model import LCNN, LCNN_LSTM_Sum
from src.transforms.lfcc import LFCCTransform

def test_lcnn_lstm_sum():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã LCNN-LSTM-sum.
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LCNN-LSTM-sum –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    
    # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª–∏
    lcnn_original = LCNN(num_classes=2, dropout_rate=0.3)
    lcnn_lstm_sum = LCNN_LSTM_Sum(num_classes=2, dropout_rate=0.3)
    
    print(f"‚úÖ –ú–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:")
    print(f"   üìä LCNN: {sum(p.numel() for p in lcnn_original.parameters()):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"   üîÄ LCNN-LSTM-sum: {sum(p.numel() for p in lcnn_lstm_sum.parameters()):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # LFCC —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    lfcc_transform = LFCCTransform(
        sample_rate=16000,
        n_fft=512,
        hop_length=160,
        win_length=320,
        n_filter=20,
        n_lfcc=20,
        use_deltas=True
    )
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
    test_audio = torch.randn(1, 32000)  # 2 —Å–µ–∫ –ø—Ä–∏ 16kHz
    print(f"\nüéµ –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ: {test_audio.shape}")
    
    # LFCC –ø—Ä–∏–∑–Ω–∞–∫–∏
    lfcc_features = lfcc_transform(test_audio)
    print(f"üìä LFCC –ø—Ä–∏–∑–Ω–∞–∫–∏: {lfcc_features.shape}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏
    models = {
        "LCNN": lcnn_original,
        "LCNN-LSTM-sum": lcnn_lstm_sum
    }
    
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ forward pass:")
    
    for name, model in models.items():
        try:
            model.eval()
            with torch.no_grad():
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º batch
                batch = {'data_object': lfcc_features}
                
                # Forward pass
                output = model(batch)
                logits = output['logits']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
                assert logits.shape == (1, 2), f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {logits.shape}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏—Ç—ã —Ä–∞–∑—É–º–Ω—ã–µ
                probabilities = torch.softmax(logits, dim=1)
                
                print(f"   ‚úÖ {name}:")
                print(f"      –í—ã—Ö–æ–¥: {logits.shape}")
                print(f"      –õ–æ–≥–∏—Ç—ã: [{logits[0, 0].item():.4f}, {logits[0, 1].item():.4f}]")
                print(f"      –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: [{probabilities[0, 0].item():.4f}, {probabilities[0, 1].item():.4f}]")
                
        except Exception as e:
            print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
            raise e
    
    # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    print(f"\nüîß –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∞—É–¥–∏–æ:")
    
    test_sizes = [
        (8000, "0.5s"),
        (16000, "1.0s"), 
        (48000, "3.0s"),
        (64000, "4.0s")
    ]
    
    for samples, duration in test_sizes:
        test_audio = torch.randn(1, samples)
        lfcc_features = lfcc_transform(test_audio)
        
        batch = {'data_object': lfcc_features}
        
        with torch.no_grad():
            output_original = lcnn_original(batch)
            output_lstm = lcnn_lstm_sum(batch)
            
            print(f"   üìè {duration}: {test_audio.shape} ‚Üí LFCC {lfcc_features.shape} ‚Üí Outputs {output_original['logits'].shape}")
    
    # –¢–µ—Å—Ç batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print(f"\nüîß –¢–µ—Å—Ç batch –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    
    batch_audio = torch.randn(4, 32000)  # batch –∏–∑ 4 –∞—É–¥–∏–æ
    batch_lfcc = lfcc_transform(batch_audio)
    batch_dict = {'data_object': batch_lfcc}
    
    with torch.no_grad():
        batch_output_original = lcnn_original(batch_dict)
        batch_output_lstm = lcnn_lstm_sum(batch_dict)
        
        print(f"   üéØ Batch: {batch_audio.shape} ‚Üí LFCC {batch_lfcc.shape}")
        print(f"        LCNN: {batch_output_original['logits'].shape}")
        print(f"        LCNN-LSTM-sum: {batch_output_lstm['logits'].shape}")
    
    print(f"\nüèÜ –í—Å–µ —Ç–µ—Å—Ç—ã LCNN-LSTM-sum –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print(f"\nüìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ LCNN-LSTM-sum:")
    print(f"   üîÑ CNN —á–∞—Å—Ç—å: –¢–∞ –∂–µ —á—Ç–æ –∏ –≤ LCNN")
    print(f"   üß† 2x Bi-LSTM —Å–ª–æ—è —Å skip connection")
    print(f"   üìä Average pooling –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏") 
    print(f"   üéØ FC —Å–ª–æ–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    return True

if __name__ == "__main__":
    test_lcnn_lstm_sum() 