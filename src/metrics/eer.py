import torch
import numpy as np
from typing import Dict, Any

from src.metrics.base_metric import BaseMetric


class EERMetric(BaseMetric):
    """
    Equal Error Rate (EER) metric for audio anti-spoofing.
    """

    def __init__(self, **kwargs):
        """
        Args:
            **kwargs: additional arguments
        """
        super(EERMetric, self).__init__()
        
        print("üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EERMetric...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for key, value in kwargs.items():
            print(f"   üìä {key}: {value}")
        
        self.name = "eer"
        print("‚úÖ EERMetric –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def forward(self, **batch) -> float:
        """
        Compute EER metric.
        
        Args:
            **batch: input batch containing scores and labels
            
        Returns:
            float: EER value
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if hasattr(self, '_debug_forward') and self._debug_forward:
            print(f"   üìà EERMetric forward: –≤—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–∏ {list(batch.keys())}")
            for key, value in batch.items():
                if isinstance(value, torch.Tensor):
                    print(f"      {key}: shape={value.shape}, dtype={value.dtype}")
        
        # –ü–æ–ª—É—á–∞–µ–º scores –∏ labels
        if 'scores' in batch:
            scores = batch['scores']
        elif 'logits' in batch:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å logits, –±–µ—Ä–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∞—Å—Å–∞ (spoof)
            logits = batch['logits']
            scores = torch.softmax(logits, dim=1)[:, 1]
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã scores –∏–ª–∏ logits –≤ –±–∞—Ç—á–µ")
            return 0.0
        
        labels = batch['labels']
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if hasattr(self, '_debug_forward') and self._debug_forward:
            print(f"   üìä Scores: shape={scores.shape}, range=[{scores.min().item():.4f}, {scores.max().item():.4f}]")
            print(f"   üìä Labels: shape={labels.shape}, unique={torch.unique(labels).tolist()}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º EER
        eer = self._compute_eer(scores, labels)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if hasattr(self, '_debug_forward') and self._debug_forward:
            print(f"   üìà EER: {eer:.4f}")
        
        return eer

    def _compute_eer(self, scores: torch.Tensor, labels: torch.Tensor) -> float:
        """
        Compute Equal Error Rate.
        
        Args:
            scores (torch.Tensor): prediction scores
            labels (torch.Tensor): ground truth labels
            
        Returns:
            float: EER value
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        scores_np = scores.detach().cpu().numpy()
        labels_np = labels.detach().cpu().numpy()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        thresholds = np.unique(scores_np)
        
        # –í—ã—á–∏—Å–ª—è–µ–º FAR –∏ FRR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        far_values = []
        frr_values = []
        
        for threshold in thresholds:
            # FAR = FP / (FP + TN) = FP / (FP + TN)
            # FRR = FN / (FN + TP) = FN / (FN + TP)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 1 –µ—Å–ª–∏ score >= threshold, –∏–Ω–∞—á–µ 0
            predictions = (scores_np >= threshold).astype(int)
            
            # –í—ã—á–∏—Å–ª—è–µ–º confusion matrix
            tp = np.sum((predictions == 1) & (labels_np == 1))
            tn = np.sum((predictions == 0) & (labels_np == 0))
            fp = np.sum((predictions == 1) & (labels_np == 0))
            fn = np.sum((predictions == 0) & (labels_np == 1))
            
            # –í—ã—á–∏—Å–ª—è–µ–º FAR –∏ FRR
            far = fp / (fp + tn) if (fp + tn) > 0 else 0
            frr = fn / (fn + tp) if (fn + tp) > 0 else 0
            
            far_values.append(far)
            frr_values.append(frr)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É, –≥–¥–µ FAR ‚âà FRR
        far_values = np.array(far_values)
        frr_values = np.array(frr_values)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, –≥–¥–µ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞
        diff = np.abs(far_values - frr_values)
        min_idx = np.argmin(diff)
        
        # EER - —ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ FAR –∏ FRR –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ
        eer = (far_values[min_idx] + frr_values[min_idx]) / 2
        
        return float(eer)

    def set_debug_mode(self, debug_forward=False):
        """
        –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è forward pass.
        
        Args:
            debug_forward (bool): –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å forward pass
        """
        self._debug_forward = debug_forward
        if debug_forward:
            print(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è {self.__class__.__name__}")
            print(f"   üìà Debug forward: {debug_forward}")